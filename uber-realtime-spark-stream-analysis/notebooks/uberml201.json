{"paragraphs":[{"text":"import org.apache.spark._\nimport org.apache.spark.sql.SparkSession\nimport org.apache.spark.sql.types._\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql._\n\nimport org.apache.spark.ml.feature.VectorAssembler\nimport org.apache.spark.ml.clustering.KMeans","dateUpdated":"2016-12-20T10:22:45-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"colWidth":12},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1482258124829_930048789","id":"20161110-150159_1876766765","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport org.apache.spark.ml.feature.StringIndexer\n\nimport org.apache.spark.ml.feature.VectorAssembler\n\nimport org.apache.spark.ml.clustering.KMeans\n\nimport org.apache.spark.ml.clustering.KMeansModel\n\nimport org.apache.spark.mllib.linalg.Vectors\n"},"dateCreated":"2016-12-20T10:22:04-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2295"},{"text":"   import spark.implicits._\n\n    val schema = StructType(Array(\n      StructField(\"dt\", TimestampType, true),\n      StructField(\"lat\", DoubleType, true),\n      StructField(\"lon\", DoubleType, true),\n      StructField(\"base\", StringType, true)\n    ))","dateUpdated":"2016-12-20T10:23:29-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1482258124830_931203036","id":"20161110-150238_829763029","result":{"code":"SUCCESS","type":"TEXT","msg":"\nmodel: org.apache.spark.ml.clustering.KMeansModel = kmeans_d8bb6277d7d8\n"},"dateCreated":"2016-12-20T10:22:04-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2296"},{"text":"    val df = spark.read.option(\"header\", \"false\").schema(schema).csv(\"/user/user01/data/uber.csv\")\n\n    df.cache\n","dateUpdated":"2016-12-20T10:25:24-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"colWidth":12},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1482258124831_930818287","id":"20161110-150340_1550628996","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport sqlContext.implicits._\n\nimport sqlContext._\n\nimport org.apache.spark.sql.types._\n\nimport org.apache.spark.sql.functions._\n\nimport org.apache.spark.sql._\n\nschema: org.apache.spark.sql.types.StructType = StructType(StructField(dt,TimestampType,true), StructField(lat,DoubleType,true), StructField(lon,DoubleType,true), StructField(base,StringType,true))\n\ndf: org.apache.spark.sql.DataFrame = [dt: timestamp, lat: double, lon: double, base: string]\n"},"dateCreated":"2016-12-20T10:22:04-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2298"},{"text":"    df.show\n    df.schema\n\n    val featureCols = Array(\"lat\", \"lon\")\n    val assembler = new VectorAssembler().setInputCols(featureCols).setOutputCol(\"features\")\n    val df2 = assembler.transform(df)\n    val Array(trainingData, testData) = df2.randomSplit(Array(0.7, 0.3), 5043)","dateUpdated":"2016-12-20T10:22:04-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"colWidth":12},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1482258124832_916582578","id":"20161110-150444_1223310847","result":{"code":"SUCCESS","type":"TEXT","msg":"+--------------------+-------+--------+------+\n|                  dt|    lat|     lon|  base|\n+--------------------+-------+--------+------+\n|2014-08-01 00:00:...| 40.729|-73.9422|B02598|\n|2014-08-01 00:00:...|40.7476|-73.9871|B02598|\n|2014-08-01 00:00:...|40.7424|-74.0044|B02598|\n|2014-08-01 00:00:...| 40.751|-73.9869|B02598|\n|2014-08-01 00:00:...|40.7406|-73.9902|B02598|\n|2014-08-01 00:00:...|40.6994|-73.9591|B02617|\n|2014-08-01 00:00:...|40.6917|-73.9398|B02617|\n|2014-08-01 00:00:...|40.7063|-73.9223|B02617|\n|2014-08-01 00:00:...|40.6759|-74.0168|B02617|\n|2014-08-01 00:00:...|40.7617|-73.9847|B02617|\n|2014-08-01 00:00:...|40.6969|-73.9064|B02617|\n|2014-08-01 00:00:...|40.7623|-73.9751|B02617|\n|2014-08-01 00:00:...|40.6982|-73.9669|B02617|\n|2014-08-01 00:00:...|40.7553|-73.9253|B02617|\n|2014-08-01 00:00:...|40.7325|-73.9876|B02682|\n|2014-08-01 00:00:...|40.6754| -74.017|B02682|\n|2014-08-01 00:00:...|40.7303|-74.0029|B02682|\n|2014-08-01 00:00:...|40.7218|-73.9973|B02682|\n|2014-08-01 00:00:...|40.7134|-74.0091|B02682|\n|2014-08-01 00:00:...|40.7194|-73.9964|B02682|\n+--------------------+-------+--------+------+\nonly showing top 20 rows\n\n\nres2: org.apache.spark.sql.types.StructType = StructType(StructField(dt,TimestampType,true), StructField(lat,DoubleType,true), StructField(lon,DoubleType,true), StructField(base,StringType,true))\n\nfeatureCols: Array[String] = Array(lat, lon)\n\nassembler: org.apache.spark.ml.feature.VectorAssembler = vecAssembler_e72a96c000bf\n\ndf2: org.apache.spark.sql.DataFrame = [dt: timestamp, lat: double, lon: double, base: string, features: vector]\n\n\ntrainingData: org.apache.spark.sql.DataFrame = [dt: timestamp, lat: double, lon: double, base: string, features: vector]\ntestData: org.apache.spark.sql.DataFrame = [dt: timestamp, lat: double, lon: double, base: string, features: vector]\n"},"dateCreated":"2016-12-20T10:22:04-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2299"},{"text":"    // increase the iterations if running on a cluster (this runs on a 1 node sandbox)\n    val kmeans = new KMeans().setK(8).setFeaturesCol(\"features\").setMaxIter(1)\n    val model = kmeans.fit(trainingData)\n    println(\"Final Centers: \")\n    model.clusterCenters.foreach(println)\n\n    val categories = model.transform(testData)\n\n    categories.show\n    categories.createOrReplaceTempView(\"uber\")","dateUpdated":"2016-12-20T10:26:28-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"colWidth":12},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1482258124832_916582578","id":"20161110-150616_904764206","result":{"code":"SUCCESS","type":"TEXT","msg":"\npredictions: org.apache.spark.sql.DataFrame = [dt: timestamp, lat: double, lon: double, base: string, features: vector, prediction: int]\n\nres3: Long = 8\n"},"dateCreated":"2016-12-20T10:22:04-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2300"},{"text":"","dateUpdated":"2016-12-20T10:26:49-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1482258124833_916197829","id":"20161110-150801_1947302396","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2016-12-20T10:22:04-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2301"},{"text":"categories.select(month($\"dt\").alias(\"month\"),dayofmonth($\"dt\").alias(\"day\"),hour($\"dt\").alias(\"hour\"), $\"prediction\").groupBy(\"month\",\"day\",\"hour\",\"prediction\").agg(count(\"prediction\").alias(\"count\")).orderBy(\"day\", \"hour\",\"prediction\").show   ","dateUpdated":"2016-12-20T10:26:50-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"colWidth":12,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1482258124833_916197829","id":"20161110-151422_991349462","result":{"code":"SUCCESS","type":"TEXT","msg":"+-----+---+----+----------+-----+\n|month|day|hour|prediction|count|\n+-----+---+----+----------+-----+\n|    8|  1|   0|         0|   58|\n|    8|  1|   0|         1|    2|\n|    8|  1|   0|         3|    9|\n|    8|  1|   0|         4|    4|\n|    8|  1|   0|         5|   41|\n|    8|  1|   0|         6|    2|\n|    8|  1|   0|         7|  117|\n|    8|  1|   1|         0|   36|\n|    8|  1|   1|         1|    1|\n|    8|  1|   1|         3|    1|\n|    8|  1|   1|         4|    3|\n|    8|  1|   1|         5|   28|\n|    8|  1|   1|         6|    2|\n|    8|  1|   1|         7|   65|\n|    8|  1|   2|         0|   24|\n|    8|  1|   2|         3|    1|\n|    8|  1|   2|         4|    4|\n|    8|  1|   2|         5|   13|\n|    8|  1|   2|         7|   32|\n|    8|  1|   3|         0|   31|\n+-----+---+----+----------+-----+\nonly showing top 20 rows\n\n"},"dateCreated":"2016-12-20T10:22:04-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2302"},{"text":"  categories.select(month($\"dt\").alias(\"month\"), dayofmonth($\"dt\").alias(\"day\"), hour($\"dt\").alias(\"hour\"), $\"prediction\").groupBy(\"month\", \"day\", \"hour\", \"prediction\").agg(count(\"prediction\").alias(\"count\")).orderBy(\"day\", \"hour\", \"prediction\").show\n\n  categories.select(hour($\"dt\").alias(\"hour\"), $\"prediction\").groupBy(\"hour\", \"prediction\").agg(count(\"prediction\")\n      .alias(\"count\")).orderBy(desc(\"count\")).show\n\ncategories.groupBy(\"prediction\").count().show()\n\nspark.sql(\"select prediction, count(prediction) as count from uber group by prediction\").show\n\n spark.sql(\"SELECT hour(uber.dt) as hr,count(prediction) as ct FROM uber group By hour(uber.dt)\").show","dateUpdated":"2016-12-20T10:22:04-0800","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"colWidth":12,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1482258124834_917352075","id":"20161110-151640_589325930","dateCreated":"2016-12-20T10:22:04-0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2303"}],"name":"uberml201","id":"2C61DRY46","angularObjects":{"2C2XCK9N2:shared_process":[],"2C2C6YTE9:shared_process":[],"2C2PAXZ71:shared_process":[],"2BYJKJ2B9:shared_process":[],"2BYU4XWG7:shared_process":[],"2C2386VGY:shared_process":[],"2BYY7KT1Y:shared_process":[],"2BZ19T36E:shared_process":[],"2C111W6R1:shared_process":[],"2BZSF3KMD:shared_process":[],"2BZWFXHTS:shared_process":[],"2BYF67G49:shared_process":[],"2BZVP2VXE:shared_process":[],"2C17C39N6:shared_process":[],"2BZ758SYT:shared_process":[],"2BYU8DWKN:shared_process":[],"2BYMRVMW3:shared_process":[],"2C357XWTJ:shared_process":[],"2C2NZFHX9:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}